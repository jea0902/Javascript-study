// 모듈 = 부품
// ***작고 단순한 것에서 크고 복잡한 것으로 진화 (코드의 재활용성, 유지보수를 쉽게할 수 있는 다양한 기법들) -> 모듈화

// ***잘 만들어진 모듈 -> 코드를 여러 개의 파일로 분리해서 사용
// => ***필요할 때마다 재활용 가능 (ex. 로그인, 회원가입 로직을 그냥 그대로 사용하면 되잖아. 압도적으로 효율적이잖아) = API나 다름없다!!
// 코드 수정 시에 필요한 로직을 빠르게 찾을 수 있다.
// 필요한 로직만을 로드해서 메모리의 낭비를 줄일 수 있다.

// 자바스크립트에서는 모듈이라는 개념이 존재하지 않음.


// 모듈의 효용성

// 함수가 대표적으로 모듈이지
function welcome() {
    return "hello"
    //코드가 아주 길다고 치고, 이 함수를 다른 데서 그냥 import하거나, 속성 src를 이용해 코드를 단순화 시켜서 사용할 곳에서는 가독성이 좋고,
    // 필요한 로직만을 가져다 쓸 수 있다는 것이 효용성
}

// 서버쪽 자바스크립트 node.js

// 라이브러리 
// 모듈과 비슷한 개념인데, 모듈이 프로그램을 구성하는 작은 부품으로서의 로직
// ***라이브러리는 자주 사용되는 로직을 재사용하기 편리하도록 잘 정리한 일련의 코드들의 집합

// JS에서는 대표적으로 유명한 라이브러리인 jQuery가 존재.
// jQuery 라이브러리를 사용하려면 => JQuery 다운로드 or API 문서(사용설명서)를 보고 사용

// ***생코의 J쿼리 사용을 봤는데 진짜 자바스크립트로만 만드는 것보다 *훨씬 집약적이고 효율적으로 코드를 줄일 수 있더라 (8줄이상 되는 코드가 단 2줄)
// J쿼리 라이브러리가 얼마나 유용한지를 이해함.


